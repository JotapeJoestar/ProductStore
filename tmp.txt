import { Component, ElementRef, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { ProductService } from '../../services/product.service';
import { Product } from '../../models/product.model';
import { RouterModule } from '@angular/router';

@Component({
  selector: 'app-product-detail',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.scss']
})
export class ProductDetailComponent {
  product: Product | undefined;
  selectedImage: string | undefined;
  zoomStyle: any = {};
  whatsappNumber = '573132567020';

  @ViewChild('mainImg', { static: false }) mainImgRef!: ElementRef<HTMLImageElement>;

  constructor(
    private route: ActivatedRoute,
    private productService: ProductService
  ) { }

  ngOnInit(): void {
    this.route.paramMap.subscribe(() => {
      this.loadProduct();
    });
  }
  zoomActive = false;

  @ViewChild('mainImg', { static: false }) mainImg!: ElementRef;

  toggleZoom(): void {
    this.zoomActive = !this.zoomActive;
  }

  onZoom(event: MouseEvent): void {
    if (!this.zoomActive || !this.mainImg) return;

    const rect = this.mainImg.nativeElement.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const xPercent = (x / rect.width) * 100;
    const yPercent = (y / rect.height) * 100;

    this.zoomStyle = {
      'background-image': `url('${this.selectedImage || this.product?.images[0]}')`,
      'background-position': `${xPercent}% ${yPercent}%`,
      'background-size': '200%'
    };
  }

  resetZoom(): void {
    this.zoomStyle = {};
  }

  relatedProducts: Product[] = [];

  loadProduct(): void {
    const id = Number(this.route.snapshot.paramMap.get('id'));
    const product = this.productService.getProductById(id);

    if (product) {
      this.product = product;
      this.selectedImage = product.image;
      this.relatedProducts = this.productService.getRelatedProducts(product.id);
    } else {
      console.error('Producto no encontrado');
    }
  }

  getQuoteUrl(): string {
    const name = this.product?.name ?? '';
    const msg = `Hola, deseo mÃ¡s informaciÃ³n sobre el producto "${name}"`;
    return `https://wa.me/${this.whatsappNumber}?text=${encodeURIComponent(msg)}`;
  }


}

